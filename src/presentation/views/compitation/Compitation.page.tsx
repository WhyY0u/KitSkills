import { useState, useEffect } from "react";
import { useLocation, useParams, useNavigate } from "react-router";
import styles from "./style/Style.module.css";
import type { Skill } from "@/domain/entities/skill/Skill";
import { competenciesService } from "@/data/datasources/api/competenciesService";

const podiumIcons = ["ü•á", "ü•à", "ü•â"];
const scoreIcon = "üèÜ";

const Competition = () => {
    const location = useLocation();
    const navigate = useNavigate();
    const { id } = useParams<{ id: string }>();
    const [skill, setSkill] = useState<Skill | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    
    useEffect(() => {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∏–∑ state –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (location.state?.skill) {
            setSkill(location.state.skill);
        } else {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ state, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ID —á–µ—Ä–µ–∑ API
            console.warn('–î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —á–µ—Ä–µ–∑ state');
        }
    }, [location.state, id]);
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if (!skill) {
        return <div className={styles.loadingContainer}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    }
    
    // –ï—Å–ª–∏ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if (isLoading) {
        return <div className={styles.loadingContainer}>–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç...</div>;
    }

    

    const sortedResults = [...skill.topResult].sort((a, b) => b.score - a.score);
    const podium = sortedResults.slice(0, 3);
    const others = sortedResults.slice(3);

    const handleStartTest = async () => {
        try {
            setIsLoading(true);
            setError(null);
            
            if (!id) {
                setError('ID –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            const response = await competenciesService.selectCompetency(id);
            
            if (response) {
                // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API
                console.log('–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞:', response);
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ—Å—Ç–∞
                navigate(`/test/${id}`);
            }
        } catch (err: any) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:', err);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—à–∏–±–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ 403
            if (
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                err.status === 403 ||
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                (err.error && err.error.statusCode === 403) ||
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—à–∏–±–∫–∏
                (typeof err === 'string' && err.includes('403')) ||
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                (err.message && err.message.includes('–≠—Ç–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞')) ||
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–æ–π
                (typeof err === 'string' && err.includes('"statusCode":403')) ||
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {message, error, statusCode}
                (err.statusCode === 403 && err.message && err.message.includes('–≠—Ç–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞'))
            ) {
                setError('–≠—Ç–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –∏ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞');
            } else {
                setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞');
            }
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className={styles.competitionContainer}>
            <h1 className={styles.competitionTitle}>{skill.name}</h1>
            <p className={styles.skillDescription}>{skill.description}</p>

            {/* –ü–û–î–ò–£–ú */}
            <div className={styles.podium}>
                {[1, 0, 2].map((position) => {
                    const result = podium[position];
                    if (!result) return null;
                    return (
                        <div key={position} className={`${styles.podiumPlace} ${styles[`place${position + 1}`]}`}>
                            <div className={styles.podiumContent}>
                                <span className={styles.podiumIcon}>{podiumIcons[position]}</span>
                                <span className={styles.userName}>{result.user.fullname}</span>
                                {result.user.group && <span className={styles.userGroup}>{result.user.group}</span>}
                                <span className={styles.score}>{scoreIcon} {result.score} –±–∞–ª–ª–æ–≤</span>
                                {result.time && <span className={styles.time}>‚è± {result.time}</span>}
                            </div>
                        </div>
                    );
                })}
            </div>
            {error && <div className={styles.errorMessage}>{error}</div>}
            <button 
                className={styles.startTestButton} 
                onClick={handleStartTest}
                disabled={isLoading}
            >
                {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'}
            </button>
        </div>
    );
};

export default Competition;
